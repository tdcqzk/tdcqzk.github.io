<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>研究博客知识点</title>
    <url>/2021/08/03/%E7%A0%94%E7%A9%B6%E5%8D%9A%E5%AE%A2%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="研究博客知识点"><a href="#研究博客知识点" class="headerlink" title="研究博客知识点"></a>研究博客知识点</h2><span id="more"></span>

<h2 id="一、使用hexo搭建博客所生成的文件夹的作用"><a href="#一、使用hexo搭建博客所生成的文件夹的作用" class="headerlink" title="一、使用hexo搭建博客所生成的文件夹的作用"></a>一、使用hexo搭建博客所生成的文件夹的作用</h2><h3 id="1-node-modules是hexo依赖包，一般动"><a href="#1-node-modules是hexo依赖包，一般动" class="headerlink" title="1.node_modules是hexo依赖包，一般动"></a>1.node_modules是hexo依赖包，一般动</h3><h3 id="2-public一般是在执行了hexo-init-后就生成了的，记录什么时候创建，删除，修改博客"><a href="#2-public一般是在执行了hexo-init-后就生成了的，记录什么时候创建，删除，修改博客" class="headerlink" title="2.public一般是在执行了hexo init 后就生成了的，记录什么时候创建，删除，修改博客"></a>2.public一般是在执行了hexo init 后就生成了的，记录什么时候创建，删除，修改博客</h3><h3 id="3-themes文件夹下就是博客主题文件，下载的主题就在这个下面"><a href="#3-themes文件夹下就是博客主题文件，下载的主题就在这个下面" class="headerlink" title="3.themes文件夹下就是博客主题文件，下载的主题就在这个下面"></a>3.themes文件夹下就是博客主题文件，下载的主题就在这个下面</h3><h3 id="4-config-yml是配置，修改了主题等等要在这里面做相应的修改"><a href="#4-config-yml是配置，修改了主题等等要在这里面做相应的修改" class="headerlink" title="4._config.yml是配置，修改了主题等等要在这里面做相应的修改"></a>4._config.yml是配置，修改了主题等等要在这里面做相应的修改</h3><h2 id="二、常规操作命令"><a href="#二、常规操作命令" class="headerlink" title="二、常规操作命令"></a>二、常规操作命令</h2><h3 id="1-始化"><a href="#1-始化" class="headerlink" title="1.始化"></a>1.始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="2-设置仓库"><a href="#2-设置仓库" class="headerlink" title="2.设置仓库"></a>2.设置仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改_config.yml最后面</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/tdcqzk/tdcqzk.github.io.git  #你的仓库地址，以github为例</span><br><span class="line">  branch: main #注意创建的时候不是master的话就不是</span><br></pre></td></tr></table></figure>



<h3 id="3-部署上去"><a href="#3-部署上去" class="headerlink" title="3.部署上去"></a>3.部署上去</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d       <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure>

<h3 id="4-创建新的博客"><a href="#4-创建新的博客" class="headerlink" title="4.创建新的博客"></a>4.创建新的博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;博客标题&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-删除博客"><a href="#5-删除博客" class="headerlink" title="5.删除博客"></a>5.删除博客</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#直接从文件夹删除</span><br><span class="line">#或者用命令行（回归一下删除命令）</span><br><span class="line">rm xxx              #删除文件</span><br><span class="line">rmdir xxx           #删除空文件夹</span><br><span class="line">rm -rf xxx          #删除非空文件夹</span><br></pre></td></tr></table></figure>

<h3 id="6-博客的完善美化"><a href="#6-博客的完善美化" class="headerlink" title="6.博客的完善美化"></a>6.博客的完善美化</h3><p><a href="https://zhuanlan.zhihu.com/p/106060640">个人博客第8篇——优化主题（持续更新） - 知乎 (zhihu.com)</a>)</p>
<p><a href="https://hexo.io/zh-cn/docs/">官方文档 | Hexo</a></p>
<h2 id="三、遇到的一些坑"><a href="#三、遇到的一些坑" class="headerlink" title="三、遇到的一些坑"></a>三、遇到的一些坑</h2><h3 id="1-报错"><a href="#1-报错" class="headerlink" title="1.报错"></a>1.报错</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key</span><br></pre></td></tr></table></figure>

<p>这意思是没有加空格，在写Blog文章或者修改配置文件时候，一定要注意加空格呀</p>
<h3 id="2-github下载太慢了"><a href="#2-github下载太慢了" class="headerlink" title="2.github下载太慢了"></a>2.github下载太慢了</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用镜像下载github.com.cnpmjs.org</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>初探博客的一点感受</title>
    <url>/2021/08/02/%E5%88%9D%E6%8E%A2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<h2 id="关于学习blog"><a href="#关于学习blog" class="headerlink" title="关于学习blog"></a>关于学习blog</h2><span id="more"></span>

<h3 id="1-动机"><a href="#1-动机" class="headerlink" title="1.动机"></a>1.动机</h3><p>​    下定决心要考计算机的研究生，总觉得自己从没有做过和计算机相关的实践，这次想借助假期的空空闲，一边预习计算机知识，一边搭建和完善博客，相信自己一定能够从中有所收获。</p>
<h3 id="2-搭建中遇到过一些困难"><a href="#2-搭建中遇到过一些困难" class="headerlink" title="2.搭建中遇到过一些困难"></a>2.搭建中遇到过一些困难</h3><p>​    虽然有困难，但是一方面有一些编程基础，另一方面，积极百度寻找解决方案，还是可以hold住的</p>
<h3 id="3-接下来的打算"><a href="#3-接下来的打算" class="headerlink" title="3.接下来的打算"></a>3.接下来的打算</h3><p>​    继续坚持下去，一方面在博客上更新自己的总结，另一方面在博客记录自己的生活</p>
<h3 id="4-愿景"><a href="#4-愿景" class="headerlink" title="4.愿景"></a>4.愿景</h3><p>​    既然下定决心要考研计算机，就一定要付出努力，相信自己一定可以做到的。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习笔记</title>
    <url>/2021/08/03/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="git使用-windows"><a href="#git使用-windows" class="headerlink" title="git使用(windows)"></a>git使用(windows)</h2><span id="more"></span>

<h3 id="1-安装和设置"><a href="#1-安装和设置" class="headerlink" title="1.安装和设置"></a>1.安装和设置</h3><h4 id="1-直接安装"><a href="#1-直接安装" class="headerlink" title="(1)直接安装"></a>(1)直接安装</h4><h4 id="2-名字和邮箱"><a href="#2-名字和邮箱" class="headerlink" title="(2)名字和邮箱"></a>(2)名字和邮箱</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span> <span class="comment">#全局</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建版本库并且增删改查"><a href="#2-创建版本库并且增删改查" class="headerlink" title="2.创建版本库并且增删改查"></a>2.创建版本库并且增删改查</h3><h4 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="(1)基本命令"></a>(1)基本命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">cd</span> <span class="built_in">pwd</span> </span><br><span class="line">git inint</span><br></pre></td></tr></table></figure>

<h4 id="2-提交文件到仓库"><a href="#2-提交文件到仓库" class="headerlink" title="(2)提交文件到仓库"></a>(2)提交文件到仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">&quot;add a file to repo&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-修改"><a href="#3-修改" class="headerlink" title="(3)修改"></a>(3)修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改完后看状态，差异以及提交</span></span><br><span class="line">git status </span><br><span class="line">git diff xx.txt</span><br><span class="line">git add xx.txt</span><br><span class="line">git commit -m <span class="string">&quot;add two stentences into readme.txt&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-回退或者改变版本"><a href="#4-回退或者改变版本" class="headerlink" title="(4)回退或者改变版本"></a>(4)回退或者改变版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment">#查看日志</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline<span class="comment">#查看日志,显示在一行，整洁</span></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#上一个，HEAD^^上两个，HEAD~100,100个</span></span><br><span class="line"><span class="comment">#又想回到新版本？</span></span><br><span class="line">git reflog <span class="comment"># 查看操作日志，找到从哪里跳过来的</span></span><br><span class="line">git reset --hard (<span class="built_in">command</span> id前几位)</span><br></pre></td></tr></table></figure>

<h4 id="5-working-directory-and-repo"><a href="#5-working-directory-and-repo" class="headerlink" title="(5) working directory and repo"></a>(5) working directory and repo</h4><ul>
<li><p>repo  add–&gt;  缓存区  commit–&gt;工作区</p>
</li>
<li><p>每次修改都要用add 否则是没有进入缓存区的，改了两次，只有第一次add，这时候commit只能将在缓存区的放进工作区</p>
</li>
<li><p>用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff HEAD -- readme.txt</span><br></pre></td></tr></table></figure></li>
<li><p>关于回退：</p>
<ul>
<li><p>在工作区做了修改，没add用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure></li>
<li><p>已经add到缓存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD readme.txt</span><br><span class="line"><span class="comment">#then</span></span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure></li>
<li><p>已经传到repo了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ <span class="comment">#这样刚刚做的修改,add以及commit全都无了，谨慎操做（虽然可以回退）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>上面用到的checkout在切换库的时候用到，因此此处用 – 做参数加以区分，新版本git引入restore,可以代替；</p>
<ul>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- file </span><br><span class="line"><span class="comment">#或者 </span></span><br><span class="line">git restore readme.txt </span><br></pre></td></tr></table></figure></li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git restore --staged readme.txt </span><br><span class="line"><span class="comment">#就回到了场景1，第二步按场景1操作。</span></span><br></pre></td></tr></table></figure></li>
<li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ <span class="comment">#这样刚刚做的修改,add以及commit全都无了，谨慎操做（虽然可以回退）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="6-删除和恢复"><a href="#6-删除和恢复" class="headerlink" title="(6)删除和恢复"></a>(6)删除和恢复</h4><ul>
<li><p>删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm test.txt <span class="comment">#工作区删除</span></span><br><span class="line">git rm test.txt <span class="comment">#then</span></span><br><span class="line">git commit -m <span class="string">&quot;删除了test.txt&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在repo删除了</span></span><br><span class="line">git restore test.txt</span><br><span class="line"><span class="comment">#在工作区删除了，无法恢复</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-github"><a href="#3-github" class="headerlink" title="3.github"></a>3.github</h3><h4 id="1-在github建立仓库"><a href="#1-在github建立仓库" class="headerlink" title="(1)在github建立仓库"></a>(1)在github建立仓库</h4><h4 id="2-本地生成公钥"><a href="#2-本地生成公钥" class="headerlink" title="(2)本地生成公钥"></a>(2)本地生成公钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;2319750740@qq.com&quot;</span></span><br><span class="line"><span class="comment">#填入存储路径，一般win10在c/Users/Dell/.ssh/rsa_id下面</span></span><br><span class="line"><span class="comment">#完成之后</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment">#直接到达目录</span></span><br><span class="line">ls <span class="comment">#查看是否有id_rsa 和 id_rsa.pub,然后</span></span><br><span class="line">cat id_rsa.pub <span class="comment">#把他复制下来，连同前面的rsa和后面的邮箱信息</span></span><br></pre></td></tr></table></figure>

<h4 id="3-把公钥弄到github上"><a href="#3-把公钥弄到github上" class="headerlink" title="(3)把公钥弄到github上"></a>(3)把公钥弄到github上</h4><ul>
<li>github 头像 ssh and GPG keys，打开新建keys粘贴进去就好了</li>
</ul>
<h4 id="4-开始链接"><a href="#4-开始链接" class="headerlink" title="(4)开始链接"></a>(4)开始链接</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:tdcqzk/learngit.git</span><br><span class="line">git push -u origin master </span><br><span class="line"><span class="comment">#之后再要推送时，直接</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#如果自己在github做了修改，再推可能出问题，这是可以强制推上去</span></span><br><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>

<h4 id="5-删除远程库"><a href="#5-删除远程库" class="headerlink" title="(5)删除远程库"></a>(5)删除远程库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先看看有哪些远程库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment">#挑出你要删除的，比如之前输错的ori</span></span><br><span class="line">git remote rm ori</span><br></pre></td></tr></table></figure>



<h2 id="ps-帮助文档"><a href="#ps-帮助文档" class="headerlink" title="ps:帮助文档"></a>ps:帮助文档</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used <span class="keyword">in</span> various situations:</span><br><span class="line"></span><br><span class="line">start a working area (see also: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">work on the current change (see also: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">examine the <span class="built_in">history</span> and state (see also: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   <span class="built_in">log</span>        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Reapply commits on top of another base tip</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;git help -a&#x27;</span> and <span class="string">&#x27;git help -g&#x27;</span> list available subcommands and some</span><br><span class="line">concept guides. See <span class="string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="string">&#x27;git help &lt;concept&gt;&#x27;</span></span><br><span class="line">to <span class="built_in">read</span> about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
